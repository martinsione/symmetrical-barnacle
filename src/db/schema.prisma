datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// zod-prisma client https://github.com/MichalLytek/typegraphql-prisma/issues/30#issuecomment-726186976
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

generator kysely {
  provider     = "prisma-kysely"
  fileName     = "types.ts"
  enumFileName = "enums.ts"
}

generator zod {
  provider              = "zod-prisma"
  output                = "./generated/zod" // (default) the directory where generated zod schemas will be saved
  relationModel         = "default" // (default) Create and export both plain and related models.
  //   relationModel         = "default" // Do not export model without relations.
  //   relationModel         = false // Do not generate related model
  modelCase             = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)
  modelSuffix           = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas
  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs          = true // represent the prisma Decimal type using Decimal.js (as Prisma does)
  imports               = null // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable
  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

model Account {
  id                String  @id @default(dbgenerated("gen_random_uuid()"))
  //   id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())

  accounts    Account[]
  memberships Membership[]
  forms       Form[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Team {
  id        String   @id @default(uuid())
  name      String
  logo      String?
  slug      String   @unique
  createdAt DateTime @default(now())

  invites TeamInvite[]
  members Membership[]
  forms   Form[]
}

model TeamInvite {
  id         String    @id @default(uuid())
  email      String
  expires    DateTime
  acceptedAt DateTime?
  createdAt  DateTime  @default(now())
  //
  team       Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId     String
}

model Membership {
  id        String         @id @default(uuid())
  role      MembershipRole @default(USER)
  createdAt DateTime       @default(now())
  //
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  team      Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String

  @@unique([userId, teamId])
}

enum MembershipRole {
  OWNER
  ADMIN
  USER
}

enum FormStatus {
  PUBLISHED
  DRAFT
}

model Form {
  id                Int        @id @default(autoincrement())
  slug              String     @unique
  name              String
  questions         Json       @default("[]")
  numberOfResponses Int        @default(0)
  password          String?
  status            FormStatus @default(DRAFT)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  responses Response[]

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
  // Team that the link belongs to
  team   Team?   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String?
}

model Response {
  id   Int  @id @default(autoincrement())
  data Json @default("{}")

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  submittedAt DateTime?

  form   Form @relation(fields: [formId], references: [id])
  formId Int
}
